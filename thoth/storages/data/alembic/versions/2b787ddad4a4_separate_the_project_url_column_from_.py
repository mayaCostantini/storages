"""Separate the project_url column from the python_package_metadata_project_url table into two columns label and url

Revision ID: 2b787ddad4a4
Revises: 930b47e27b6c
Create Date: 2022-01-31 16:26:38.049747+00:00

"""
from alembic import op
import sqlalchemy as sa
from thoth.storages.graph.models import PythonPackageMetadataProjectUrl

# revision identifiers, used by Alembic.
revision = "2b787ddad4a4"
down_revision = "930b47e27b6c"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()
    result = connection.execute("SELECT id, project_url FROM python_package_metadata_project_url").fetchall()
    op.add_column("python_package_metadata_project_url", sa.Column("url", sa.Text(), nullable=True))
    op.add_column("python_package_metadata_project_url", sa.Column("label", sa.Text(), nullable=True))
    projects_source_url = []
    for r in result:
        values = r[1].split(",")
        if len(values) > 1:
            projects_source_url.append({"id": r[0], "label": values[0], "url": values[1]})
        else:
            # cases where project URL has no label (no other found)
            projects_source_url.append({"id": r[0], "label": None, "url": values[0]})

    result_has = connection.execute("SELECT python_package_metadata_id,python_package_metadata_project_url_id FROM has_metadata_project_url").fetchall()
    metadata_project_url_links = [{"python_package_metadata_id": r[0], "python_package_metadata_project_url_id": r[1]} for r in result_has]
    op.drop_table("has_metadata_project_url")
    op.drop_table("python_package_metadata_project_url")

    python_package_metadata_project_url_table = op.create_table(
        "python_package_metadata_project_url",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("url", sa.Text(), nullable=True),
        sa.Column("label", sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    has_metadata_project_url_table = op.create_table(
        "has_metadata_project_url",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("python_package_metadata_id", sa.Integer(), nullable=False),
        sa.Column("python_package_metadata_project_url_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["python_package_metadata_id"], ["python_package_metadata.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["python_package_metadata_project_url_id"], ["python_package_metadata_project_url.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", "python_package_metadata_id", "python_package_metadata_project_url_id"),
    )
    op.bulk_insert(python_package_metadata_project_url_table, projects_source_url)
    op.bulk_insert(has_metadata_project_url_table, metadata_project_url_links)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    connection = op.get_bind()
    op.add_column(
        "python_package_metadata_project_url", sa.Column("project_url", sa.TEXT(), autoincrement=False, nullable=True)
    )
    result = connection.execute("SELECT id, label, url FROM python_package_metadata_project_url").fetchall()
    op.drop_column("python_package_metadata_project_url", "label")
    op.drop_column("python_package_metadata_project_url", "url")
    concat_label_url = []
    for r in result:
        id_row = r[0]
        values_row = r[1]
        concat_label_url.append(
            {
                "id": id_row,
                "project_url": values_row[1] if values_row[0] is None else values_row.join(",")
            }
        )
    op.batch_alter_table() .bulk_insert(PythonPackageMetadataProjectUrl.__table__, concat_label_url)
    # ### end Alembic commands ###
